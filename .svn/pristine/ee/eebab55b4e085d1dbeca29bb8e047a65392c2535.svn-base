<?php  

// importar dependencias
require_once 'CampanhaBusiness.php';
require_once '../campanhaqrcode/campanhaQrCodeBusinessImpl.php';

require_once '../variavel/ConstantesVariavel.php';
require_once '../variavel/VariavelCache.php';

/**
 * CampanhaBusinessImpl - Implementação da classe de negocio
 */
class CampanhaBusinessImpl implements CampanhaBusiness
{
	
	function __construct()	{	}

	public function carregar($daofactory, $dto)	{	}
	public function deletar($daofactory, $dto)	{	}
	public function atualizar($daofactory, $dto)	{	}
	public function listarTudo($daofactory)	{	}

	public function listarCampanhasUsuario($daofactory, $id_usuario)
	{	
		$dao = $daofactory->getCampanhaDAO($daofactory);
		return $dao->listCampanhasUsuario($id_usuario);
	}


	public function listarPagina($daofactory, $pag, $qtde)	
	{	
		$dao = $daofactory->getCampanhaDAO($daofactory);
		return $dao->listPagina($pag, $qtde);
	}

	public function carregarPorID($daofactory, $id)
	{ 
		$dao = $daofactory->getCampanhaDAO($daofactory);
		return $dao->loadPK($id);
	}

	public function atualizarStatus($daofactory, $idcampanha, $status){
		$dao = $daofactory->getCampanhaDAO($daofactory);
		$updateok = true;

		// resposta padrão
		$retorno = new DTOPadrao();

		// obtem o status atual da campanha
		$dto = $this->carregarPorID($daofactory, $idcampanha);

		// Sequencia válido da máquina de estado P -> W -> A -> I
		// Verifica a maquina de estado para troca de status
		if($dto->status == ConstantesVariavel::STATUS_INATIVO){
			$retorno->msgcode = ConstantesMensagem::TROCA_STATUS_INVALIDO_NEGADA;
			$updateok = false;
		} else if($dto->status == ConstantesVariavel::STATUS_PENDENTE && $status != ConstantesVariavel::STATUS_TRABALHANDO){
			$retorno->msgcode = ConstantesMensagem::TROCA_STATUS_INVALIDO_PENDENTE;
			$updateok = false;
		} else if($dto->status == ConstantesVariavel::STATUS_TRABALHANDO && $status != ConstantesVariavel::STATUS_ATIVO){
			$retorno->msgcode = ConstantesMensagem::TROCA_STATUS_INVALIDO_TRABALHANDO;
			$updateok = false;
		} else if($dto->status == ConstantesVariavel::STATUS_ATIVO && $status != ConstantesVariavel::STATUS_INATIVO){
			$retorno->msgcode = ConstantesMensagem::TROCA_STATUS_INVALIDO_ATIVO;
			$updateok = false;
		} 

		if($updateok){
			if($dao->updateStatus($idcampanha, $status)){	
				$retorno->msgcode = ConstantesMensagem::COMANDO_REALIZADO_COM_SUCESSO;
			}		
		}
		// Obtem o texto da mensagem em razão do código de retorno
		$retorno->msgcodeString = MensagemCache::getInstance()->getMensagem($retorno->msgcode);

		return $retorno;
	}

	public function isCampanhaAtiva($daofactory, $idcampanha){
		$dao = $daofactory->getCampanhaDAO($daofactory);
		$dto = $dao->loadPK($idcampanha);
		return ($dto->status == ConstantesVariavel::STATUS_ATIVO);
	}


	public function inserir($daofactory, $dto)
	{ 
		$ok = false;

		// Monta a regra do QRCode da Campanha
		$dto->QrCodeAtivo = sha1($dto->id_usuario . $dto->dataInicio . $dto->dataTermino . Util::getCodigo(20));
		$dto->status = ConstantesVariavel::STATUS_PENDENTE;
		$dao = $daofactory->getCampanhaDAO($daofactory);

		$retorno = new DTOPadrao();
		if ($dao->insert($dto)) {
			$ok = true;
/*
			// Obtem o codigo novo da campanha RECENTEMENTE CRIADA

			$dto->id = $dao->loadMaxCampanhaID($dto->id_usuario);

			//----------------------------------------------------------------------
			// Inserir o maximo de qrcodes validos (carimbos) na Campanha Qr Codes
			// Padrão está demarcado na variavel MAXIMO_QRCODE_CARIMBO_POR_CARTAO 
			//----------------------------------------------------------------------
			$max = (int) VariavelCache::getInstance()->getVariavel(ConstantesVariavel::MAXIMO_QRCODE_CARIMBO_POR_CARTAO);
			$cqr = new campanhaQrCodeBusinessImpl();
			for ($i=0; $i < ($dto->maximoCartoes * $max); $i++) { 
				$cqrdto = new CampanhaQrCodeDTO();
				$cqrdto->id_campanha = $dto->id;
				$cqr->inserir($daofactory, $cqrdto);
			}
			$ok = true;
*/
		}

		if ($ok) {
			$retorno->msgcode = ConstantesMensagem::COMANDO_REALIZADO_COM_SUCESSO;
			$retorno->msgcodeString = MensagemCache::getInstance()->getMensagem($retorno->msgcode);
		} else {
			$retorno->msgcode = ConstantesMensagem::ERRO_INESPERADO;
			$retorno->msgcodeString = MensagemCache::getInstance()->getMensagem($retorno->msgcode);
		}

		return $retorno;
	}


}
?>
