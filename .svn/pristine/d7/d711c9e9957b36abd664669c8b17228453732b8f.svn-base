<?php

//importar dependencias
require_once 'campanhaService.php';
require_once 'campanhaBusinessImpl.php';

require_once '../campanhaqrcode/campanhaQrCodeServiceImpl.php';
require_once '../mensagem/ConstantesMensagem.php';
require_once '../mensagem/MensagemCache.php';

require_once '../daofactory/DAOFactory.php';


/**
 * CampanhaServiceImpl - Implementação dos servicos
 */
class CampanhaServiceImpl implements CampanhaService
{
	
	function __construct() {	}

	public function apagar($dto) {	}
	public function pesquisar($dto) {	}
	public function atualizar($dto) {	}
	public function listarTudo() {	}

	public function criarCampanhasEmFila(){
		// retorno padão
		$retorno = new DTOPadrao();
		$retorno->msgcode = ConstantesMensagem::COMANDO_REALIZADO_COM_SUCESSO;
		$retorno->msgcodeString = MensagemCache::getInstance()->getMensagem($retorno->msgcode);
	

		// Busca as campanhas pendentes e trava seus status
		$lst = $this->listarCampanhasPorStatus(ConstantesVariavel::STATUS_FILA);

		if($lst == null){
			$retorno->msgcode = ConstantesMensagem::NAO_EXISTEM_CAMPANHAS_NA_FILA_PARA_PROCESSAR;
			$retorno->msgcodeString = MensagemCache::getInstance()->getMensagem($retorno->msgcode);	
		} else if (count($lst) == 0) {
			$retorno->msgcode = ConstantesMensagem::NAO_EXISTEM_CAMPANHAS_NA_FILA_PARA_PROCESSAR;
			$retorno->msgcodeString = MensagemCache::getInstance()->getMensagem($retorno->msgcode);	
		} else {
			// Troca todos os status de cada campanha pra garantir que este processo é o único dono e evitar concorrência
			foreach ($lst as $campdto) {
				$ok = $this->autalizarStatusCampanha($campdto->id, ConstantesVariavel::STATUS_TRABALHANDO);
			}

			// cria cada carimbo digital conforme suas regras
			$cqrsi = new CampanhaQrCodeServiceImpl();
			foreach ($lst as $campdto) {
				$retorno = $cqrsi->criarCarimbosCampanha($campdto->id);
				if($retorno->msgcode == ConstantesMensagem::COMANDO_REALIZADO_COM_SUCESSO){
					$retorno = $this->autalizarStatusCampanha($campdto->id, ConstantesVariavel::STATUS_ATIVO);
				}
			}
		}

		return $retorno;
	}

	public function autalizarStatusCampanha($id_campanha, $status)
	{
		$daofactory = NULL;
		$retorno = NULL;
		try {
			$daofactory = DAOFactory::getDAOFactory();
			$daofactory->open();
			$daofactory->beginTransaction();
			
			// excluir assinante da campanha
 			$bo = new CampanhaBusinessImpl();
 			$retorno = $bo->atualizarStatus($daofactory, $id_campanha, $status);

 			if ($retorno->msgcode == ConstantesMensagem::COMANDO_REALIZADO_COM_SUCESSO){
				$daofactory->commit();
			} else {
				$daofactory->rollback();
			}
			
		} catch (Exception $e) {
			// rollback na transação
			$daofactory->rollback();

		} finally {
			try {
				$daofactory->close();
			} catch (Exception $e) {
				// faz algo
			}
		}

		return $retorno;
	}

	public function getCarimboLivre($idcampanha, $idusuario)
	{
		$daofactory = NULL;
		$retorno = NULL;
		try {
			$daofactory = DAOFactory::getDAOFactory();
			$daofactory->open();
			$daofactory->beginTransaction();
			
			// excluir assinante da campanha
 			$bo = new CampanhaBusinessImpl();
 			$retorno = $bo->getCarimboLivre($daofactory, $idcampanha, $idusuario);

 			if ($retorno->msgcode == ConstantesMensagem::COMANDO_REALIZADO_COM_SUCESSO) {
				$daofactory->commit();
			} else {
				$daofactory->rollback();
			}
			
		} catch (Exception $e) {
			// rollback na transação
			$daofactory->rollback();

		} finally {
			try {
				$daofactory->close();
			} catch (Exception $e) {
				// faz algo
			}
		}

		return $retorno;
	}

	public function cadastrar($dto)
	{
		$daofactory = NULL;
		$retorno = NULL;
		try {
			$daofactory = DAOFactory::getDAOFactory();
			$daofactory->open();
			$daofactory->beginTransaction();
			
			// excluir assinante da campanha
 			$bo = new CampanhaBusinessImpl();
 			$retorno = $bo->inserir($daofactory, $dto);

 			if ($retorno->msgcode == ConstantesMensagem::COMANDO_REALIZADO_COM_SUCESSO) {
				$daofactory->commit();
			} else {
				$daofactory->rollback();
			}
			
		} catch (Exception $e) {
			// rollback na transação
			$daofactory->rollback();

		} finally {
			try {
				$daofactory->close();
			} catch (Exception $e) {
				// faz algo
			}
		}

		return $retorno;
	}

	public function listarCampanhasPorStatus($status)
	{
		$daofactory = NULL;
		$retorno = NULL;
		try {
			$daofactory = DAOFactory::getDAOFactory();
			$daofactory->open();
			$daofactory->beginTransaction();
			
			// excluir assinante da campanha
 			$bo = new CampanhaBusinessImpl();
 			$retorno = $bo->listarCampanhasPorStatus($daofactory, $status);
			$daofactory->commit();
			
		} catch (Exception $e) {
			// rollback na transação

		} finally {
			try {
				$daofactory->close();
			} catch (Exception $e) {
				// faz algo
			}
		}

		return $retorno;
	}

	public function listarCampanhasUsuario($id_usuario)
	{
		$daofactory = NULL;
		$retorno = NULL;
		try {
			$daofactory = DAOFactory::getDAOFactory();
			$daofactory->open();
			$daofactory->beginTransaction();
			
			// excluir assinante da campanha
 			$bo = new CampanhaBusinessImpl();
 			$retorno = $bo->listarCampanhasUsuario($daofactory, $id_usuario);
			$daofactory->commit();
			
		} catch (Exception $e) {
			// rollback na transação

		} finally {
			try {
				$daofactory->close();
			} catch (Exception $e) {
				// faz algo
			}
		}

		return $retorno;
	}


	public function listarPagina($pag, $qtde)
	{
		$daofactory = NULL;
		$retorno = NULL;
		try {
			$daofactory = DAOFactory::getDAOFactory();
			$daofactory->open();
			$daofactory->beginTransaction();
			
			// excluir assinante da campanha
 			$bo = new CampanhaBusinessImpl();
 			$retorno = $bo->listarPagina($daofactory, $pag, $qtde);
			$daofactory->commit();
			
		} catch (Exception $e) {
			// rollback na transação

		} finally {
			try {
				$daofactory->close();
			} catch (Exception $e) {
				// faz algo
			}
		}

		return $retorno;
	}


	public function pesquisarPorID($id)
	{
		$daofactory = NULL;
		$retorno = NULL;
		try {
			$daofactory = DAOFactory::getDAOFactory();
			$daofactory->open();
			$daofactory->beginTransaction();
			
			// excluir assinante da campanha
 			$bo = new CampanhaBusinessImpl();
 			$retorno = $bo->carregarPorID($daofactory, $id);
 			if ($retorno->msgcode == ConstantesMensagem::COMANDO_REALIZADO_COM_SUCESSO){
				$daofactory->commit();
 			} else {
				$daofactory->rollback();
 			}
			
		} catch (Exception $e) {
			// rollback na transação

		} finally {
			try {
				$daofactory->close();
			} catch (Exception $e) {
				// faz algo
			}
		}

		return $retorno;
	}


}

?>