<?php  

// importar dependencias
require_once 'cartaoBusiness.php';
require_once 'cartaoBusinessImpl.php';

require_once '../variavel/ConstantesVariavel.php';
require_once '../variavel/VariavelCache.php';

/**
 * CartaoBusinessImpl - Implementação da classe de negocio
 */
class CartaoBusinessImpl implements CartaoBusiness
{
	
	function __construct()	{	}

	public function carregar($daofactory, $dto)	{	}
	public function deletar($daofactory, $dto)	{	}
	public function atualizar($daofactory, $dto)	{	}
	public function listarTudo($daofactory)	{	}

	public function listarPagina($daofactory, $pag, $qtde)	
	{	
		$dao = $daofactory->getCartaoDAO($daofactory);
		return $dao->listPagina($pag, $qtde);
	}
	
	public function pesquisarPorCampanhaUsuarioStatus($daofactory, $idusuario, $idcampanha, $status)
	{ 
		$dao = $daofactory->getCartaoDAO($daofactory);
		$retorno = $dao->loadCampanhaUsuarioStatus($idusuario, $idcampanha, $status);

		if($retorno->id != null){
			$retorno->msgcode = ConstantesMensagem::COMANDO_REALIZADO_COM_SUCESSO;
			$retorno->msgcodeString = MensagemCache::getInstance()->getMensagem($retorno->msgcode);

			if($retorno->contador >= (int) VariavelCache::getInstance()->getVariavel(ConstantesVariavel::MAXIMO_QRCODE_CARIMBO_POR_CARTAO)){
				$usbo = new UsuarioBusinessImpl();
				$usdto = $usbo->carregarPorID($daofactory, $retorno->id_usuario);

				$campbo = new CampanhaBusinessImpl();
				$campdto = $campbo->carregarPorID($daofactory, $retorno->id_campanha);

				$retorno->msgcode = ConstantesMensagem::CARTAO_TOTALMENTE_COMPLETO;
				$retorno->msgcodeString = MensagemCache::getInstance()->getMensagemParametrizada($retorno->msgcode, 
							[ 	ConstantesVariavel::P1 => $usdto->apelido,
								ConstantesVariavel::P2 => $campdto->nome
							]);
			}
		}

		return $retorno;
	}

	public function carregarPorID($daofactory, $id)
	{ 
		$dao = $daofactory->getCartaoDAO($daofactory);
		return $dao->loadPK($id);
	}

	public function incrementarContador($daofactory, $id, $qrcodecarimbo)
	{
		$dao = $daofactory->getCartaoDAO($daofactory);
		$updateok = true;

		// resposta padrão
		$retorno = new DTOPadrao();

		if($dao->incrementarContador($id, $qrcodecarimbo)){	
			$retorno->msgcode = ConstantesMensagem::COMANDO_REALIZADO_COM_SUCESSO;
		}		
		// Obtem o texto da mensagem em razão do código de retorno
		$retorno->msgcodeString = MensagemCache::getInstance()->getMensagem($retorno->msgcode);

		return $retorno;
	}


	public function atualizarStatus($daofactory, $id, $status)
	{
		$dao = $daofactory->getCartaoDAO($daofactory);
		$updateok = true;

		// resposta padrão
		$retorno = new DTOPadrao();

		// obtem o status atual da cfdi
		$dto = $this->carregarPorID($daofactory, $id);

		if($updateok){
			if($dao->updateStatus($idcfdi, $status)){	
				$retorno->msgcode = ConstantesMensagem::COMANDO_REALIZADO_COM_SUCESSO;
			}		
		}
		// Obtem o texto da mensagem em razão do código de retorno
		$retorno->msgcodeString = MensagemCache::getInstance()->getMensagem($retorno->msgcode);

		return $retorno;
	}

	public function inserir($daofactory, $dto)
	{ 
		$ok = false;

		// Monta a regra do QRCode da Cartao
		$dto->status = ConstantesVariavel::STATUS_ATIVO;
		$dao = $daofactory->getCartaoDAO($daofactory);

		$retorno = new DTOPadrao();
		if ($dao->insert($dto)) {
			$ok = true;
		}

		if ($ok) {
			$retorno->msgcode = ConstantesMensagem::COMANDO_REALIZADO_COM_SUCESSO;
			$retorno->msgcodeString = MensagemCache::getInstance()->getMensagem($retorno->msgcode);
		} else {
			$retorno->msgcode = ConstantesMensagem::ERRO_INESPERADO;
			$retorno->msgcodeString = MensagemCache::getInstance()->getMensagem($retorno->msgcode);
		}

		return $retorno;
	}


}
?>
