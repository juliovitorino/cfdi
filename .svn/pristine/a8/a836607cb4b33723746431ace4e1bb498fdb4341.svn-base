<?php  

// importar dependencias
require_once 'CfdiBusiness.php';
require_once '../cfdi/cfdiBusinessImpl.php';

require_once '../variavel/ConstantesVariavel.php';
require_once '../variavel/VariavelCache.php';

/**
 * CfdiBusinessImpl - Implementação da classe de negocio
 */
class CfdiBusinessImpl implements CfdiBusiness
{
	
	function __construct()	{	}

	public function carregar($daofactory, $dto)	{	}
	public function deletar($daofactory, $dto)	{	}
	public function atualizar($daofactory, $dto)	{	}
	public function listarTudo($daofactory)	{	}

	public function carimbarQrCodeCfdi($daofactory, $id_campanha, $id_fiel, $qrcode)
	{ 
		$ok = false;

		$dao = $daofactory->getCfdiDAO($daofactory);

		// prepara DTO
		$dto = new CfdiDTO();
		$dto->id_campanha = $id_campanha;
		$dto->id_fiel = $id_fiel;
		$dto->qrcode = $qrcode;
		$dto->modo = "C";
		$dto->status = ConstantesVariavel::STATUS_ATIVO;

		$ok = $dao->insert($dto);

		if ($ok) {
			$retorno = new DTOPadrao();
			$retorno->msgcode = ConstantesMensagem::COMANDO_REALIZADO_COM_SUCESSO;
			$retorno->msgcodeString = MensagemCache::getInstance()->getMensagem($retorno->msgcode);
		} else {
			$retorno = new DTOPadrao();
			$retorno->msgcode = ConstantesMensagem::TICKET_INVALIDO;
			$retorno->msgcodeString = MensagemCache::getInstance()->getMensagem($retorno->msgcode);
		}

		return $retorno;
	}


	public function listarPagina($daofactory, $pag, $qtde)	
	{	
		$dao = $daofactory->getCfdiDAO($daofactory);
		return $dao->listPagina($pag, $qtde);
	}

	public function carregarPorID($daofactory, $id)
	{ 
		$dao = $daofactory->getCfdiDAO($daofactory);
		return $dao->loadPK($id);
	}

	public function atualizarStatus($daofactory, $id, $status){
		$dao = $daofactory->getCfdiDAO($daofactory);
		$updateok = true;

		// resposta padrão
		$retorno = new DTOPadrao();

		// obtem o status atual da cfdi
		$dto = $this->carregarPorID($daofactory, $id);

		// Sequencia válido da máquina de estado P -> W -> A -> I
		// Verifica a maquina de estado para troca de status
/*
		if($dto->status == ConstantesVariavel::STATUS_INATIVO){
			$retorno->msgcode = ConstantesMensagem::TROCA_STATUS_INVALIDO_NEGADA;
			$updateok = false;
		} else if($dto->status == ConstantesVariavel::STATUS_PENDENTE && $status != ConstantesVariavel::STATUS_TRABALHANDO){
			$retorno->msgcode = ConstantesMensagem::TROCA_STATUS_INVALIDO_PENDENTE;
			$updateok = false;
		} else if($dto->status == ConstantesVariavel::STATUS_TRABALHANDO && $status != ConstantesVariavel::STATUS_ATIVO){
			$retorno->msgcode = ConstantesMensagem::TROCA_STATUS_INVALIDO_TRABALHANDO;
			$updateok = false;
		} else if($dto->status == ConstantesVariavel::STATUS_ATIVO && $status != ConstantesVariavel::STATUS_INATIVO){
			$retorno->msgcode = ConstantesMensagem::TROCA_STATUS_INVALIDO_ATIVO;
			$updateok = false;
		} 
*/
		if($updateok){
			if($dao->updateStatus($idcfdi, $status)){	
				$retorno->msgcode = ConstantesMensagem::COMANDO_REALIZADO_COM_SUCESSO;
			}		
		}
		// Obtem o texto da mensagem em razão do código de retorno
		$retorno->msgcodeString = MensagemCache::getInstance()->getMensagem($retorno->msgcode);

		return $retorno;
	}

	public function inserir($daofactory, $dto)
	{ 
		$ok = false;

		// Monta a regra do QRCode da Cfdi
		$dto->status = ConstantesVariavel::STATUS_ATIVO;
		$dao = $daofactory->getCfdiDAO($daofactory);

		$retorno = new DTOPadrao();
		if ($dao->insert($dto)) {
			$ok = true;
		}

		if ($ok) {
			$retorno->msgcode = ConstantesMensagem::COMANDO_REALIZADO_COM_SUCESSO;
			$retorno->msgcodeString = MensagemCache::getInstance()->getMensagem($retorno->msgcode);
		} else {
			$retorno->msgcode = ConstantesMensagem::ERRO_INESPERADO;
			$retorno->msgcodeString = MensagemCache::getInstance()->getMensagem($retorno->msgcode);
		}

		return $retorno;
	}


}
?>
